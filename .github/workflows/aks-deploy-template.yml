# This is a basic workflow to help you get started with Actions
name: Deploy AKS Infrastructure
    
# Controls when the workflow will run
on:
  # Makes theworkflow re-usuable 
  workflow_call:
    inputs:
      # the environment must be configured in GitHub with secrets to function properly
      environment:
        type: string
        required: true        
        description: Environment to deploy to
      tf_var_file:
        type: string
        required: true
        description: Terraform vars file for specific environment
    secrets:
      ARM_CLIENT_ID: 
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  prepare-terraform:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: '${{ inputs.environemt }} - Prepare'
    # environment to be used during deployment
    environment: ${{ inputs.environment }}
    # environment variables used in this job
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    
    #--service-principal --username "${ARM_CLIENT_ID}" --password "${ARM_CLIENT_SECRET}" --tenant "${ARM_TENANT_ID}"
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
   
      - name: Terraform Init
        id: init 
        run: terraform init -backend-config=storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }} -backend-config=container_name=${{secrets.TFSTATE_STORAGE_CONTAINER_NAME}} -backend-config=key=${{secrets.TFSTATE_KEY}} -backend-config=resource_group_name=${{secrets.TFSTATE_RESOURCES_GROUP_NAME}}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=${{ inputs.tf_var_file }} -no-color
               
  deploy-terraform:
    runs-on: 'ubuntu-latest'
    name: ${{ inputs.environemt }} - Deploy
    environment: '${{ inputs.environemt }}'
    # environment variables used in this job
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    needs: [ prepare-terraform ]
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
          
      - name: Terraform Init
        id: init 
        run: terraform init -backend-config=storage_account_name=${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }} -backend-config=container_name=${{secrets.TFSTATE_STORAGE_CONTAINER_NAME}} -backend-config=key=${{secrets.TFSTATE_KEY}} -backend-config=resource_group_name=${{secrets.TFSTATE_RESOURCES_GROUP_NAME}}

      - name: Terraform Apply
        id: apply
        run: terraform apply -var-file=${{ inputs.tf_var_file }} -no-color --auto-approve 
